# -*- coding: utf-8 -*-
"""comparadorhaches.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y4J7Vl1F6VplEtnJqJEes_7FCoVPirl7

Comparador de Hashes
"""

#importação da biblioteca
import hashlib

#Arquivos salvos para realizar a comparação
arquivo1 = '/a.txt'
arquivo2 = '/b.txt'

#Criação do objeto hash, que vai receber o algoritmo a ser executado para a comparação (sha1, md5, ripem160, etc)
hash1 = hashlib.new('ripemd160')

#Informar qual arquivo será comparado com o método de leitura binário rb
hash1.update(open(arquivo1,'rb').read())

"""* 'r' abre para leitura padrão
* 'w' abre para escrita, truncando o arquivo primeiro (removendo tudo o que estiver contido no mesmo)
* 'x' abre para criação exclusiva, falhando caso o arquivo exista
* 'a' abre para escrita, anexando ao final do arquivo caso o mesmo exista
* 'b' binary mode
* 't' modo texto (padrão)
* '+' aberto para atualização (leitura e escrita)
"""

#Informar o outro arquivo que será comparado pelo objeto hash2 com o método de leitura binário rb
hash2 = hashlib.new('ripemd160')
hash2.update(open(arquivo2, 'rb').read())

#Realização de comparação com a função digest(resumo dos dados)
if hash1.digest() != hash2.digest():
  print(f'O arquivo: {arquivo1} é diferente do arquivo: {arquivo2}')
  print('O hash do arquivo a.txt é: ', hash1.hexdigest())
  print('O hash do arquivo b.txt é: ', hash2.hexdigest())
else:
  print(f'O arquivo: {arquivo1} é igual ao arquivo: {arquivo2}')
  print('O hash do arquivo a.txt é: ', hash1.hexdigest()) 
  print('O hash do arquivo b.txt é: ', hash2.hexdigest())